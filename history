;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(denote--file-type-history read-expression-history shell-command-history denote--keyword-history denote--title-history yes-or-no-p-history minibuffer-history beorged/org-imenu-filter-history buffer-name-history search-ring read-char-history file-name-history extended-command-history))
(setq read-expression-history '("(concat (file-name-as-directory default_user_folder) default_journal)" "(file-name-as-directory default_user_folder)"))
(setq denote--keyword-history '("test" "aaaaaa" "a" "fda"))
(setq denote--title-history '("fffff" "a note for test" "test" "tesktjk " "trestfdjkl" "testaaa" "fdfda"))
(setq yes-or-no-p-history '("yes"))
(setq minibuffer-history '("org-agenda-files" "default_user_folder"))
(setq beorged/org-imenu-filter-history '("DEFER" "BINDING" "HOOK" "ADVICE" "FACE" "MODE" "PERSONAL" "INACTIVE" "BUGFIX" "OTHER" "TIMER" "OS"))
(setq buffer-name-history '("*Ilist*"))
(setq file-name-history '("~/PycharmProjects/second_brain/journal.org"))
(setq extended-command-history '("org-agenda" "denote-create-note" "consult-imenu" "kill-buffer" "org-imenu" "hide-ifdef-mode" "nano-modeline-mode" "vertico-mode" "find-file" "(file-name-as-directory default_user_folder)" "help-mode"))
(setq kill-ring '(#("***" 0 1 (fontified t font-lock-multiline t org-emphasis t invisible t) 1 2 (fontified t face (bold) font-lock-multiline t org-emphasis t) 2 3 (fontified t font-lock-multiline t org-emphasis t invisible t)) #("* " 0 1 (fontified t face org-level-4) 1 2 (fontified t face org-level-4)) "org-capture-expand-file: Invalid file location: nil
" "(concat (file-name-as-directory default_user_folder) default_journal)" "(file-name-as-directory default_user_folder)" "(file-name-as-directory default_user_folder)" "** 2023-05 May
*** 2023-05-19 Friday
**** test elefdajkl
fdjkl" #("** 2023-05 May
*** 2023-05-19 Friday
**** test elefdajkl
fdjkl" 0 1 (face org-hide fontified t) 1 2 (face org-level-2 fontified t) 2 3 (face org-level-2 fontified t) 3 7 (face org-level-2 fontified t) 7 14 (face org-level-2 fontified t) 14 15 (fontified t) 15 16 (fontified t face org-hide) 16 17 (fontified t face org-hide) 17 18 (fontified t face org-level-3) 18 19 (fontified t face org-level-3) 19 23 (fontified t face org-level-3) 23 36 (fontified t face org-level-3) 36 37 (fontified t) 37 38 (fontified t face org-hide) 38 39 (fontified t face org-hide) 39 40 (fontified t face org-hide) 40 42 (fontified t face org-level-4) 42 56 (fontified t face org-level-4) 56 57 (fontified t) 57 58 (fontified t) 58 62 (fontified t)) "default_user_folder" "file+olp+datetree" "file+olp+datetree" "file+olp+datetree" "error: Key sequence C-c n j starts with non-prefix key C-c n
" "org-capture-journal" "(load \"user_settings\")" "(add-hook 'org-mode-hook 'visual-line-mode)" "Roboto Mono Nerd " "Roboto Mono Nerd " "fdf" "error: Invalid face, child-frame-border
"))
(setq command-history '((helpful-variable 'org-agenda-files) (org-agenda nil) (execute-extended-command nil "org-agenda" nil) (denote-create-note "fffff" '("test") nil nil nil nil nil) (execute-extended-command nil "denote-create-note" nil) (denote-create-note "a note for test" '("test") nil nil nil nil nil) (execute-extended-command nil "denote-create-note" #("deno" 0 4 (face (nano-strong nano-salient)))) (consult-imenu) (execute-extended-command nil "consult-imenu" #("con" 0 3 (face (nano-strong nano-salient)))) (execute-extended-command nil "consult-imenu" #("imenu" 0 5 (face (nano-strong nano-salient)))) (kill-buffer "*Ilist*") (execute-extended-command nil "kill-buffer" #("kill-" 0 5 (face (nano-strong nano-salient)))) (org-imenu) (execute-extended-command nil "org-imenu" nil) (execute-extended-command nil "org-imenu" #("imen" 0 4 (face (nano-strong nano-salient)))) (hide-ifdef-mode 'toggle) (execute-extended-command nil "hide-ifdef-mode" #("fda" 0 3 (face (nano-strong nano-salient)))) (nano-modeline-mode 'toggle) (execute-extended-command nil "nano-modeline-mode" nil) (execute-extended-command nil "nano-modeline-mode" "nano-mo") (vertico-mode 'toggle) (execute-extended-command nil "vertico-mode" "vertico-m") (find-file "~/PycharmProjects/second_brain/journal.org" t) (execute-extended-command nil "find-file" "find-fil") (eval-expression '(concat (file-name-as-directory default_user_folder) default_journal) nil nil 127) (eval-expression '(file-name-as-directory default_user_folder) nil nil 127) (helpful-variable 'default_user_folder) (execute-extended-command nil "(file-name-as-directory default_user_folder)" nil) (execute-extended-command nil "find-file" "find-file") (denote "fdfda" '("fda") nil nil nil nil nil) (execute-extended-command nil "" nil) (execute-extended-command nil "org-agenda" "org-agen") (execute-extended-command nil "find-file" "find-fi") (help-mode) (execute-extended-command nil "help-mode" "help-mo")))
(setq set-variable-value-history 'nil)
(setq custom-variable-history 'nil)
(setq query-replace-history 'nil)
(setq read-expression-history '("(concat (file-name-as-directory default_user_folder) default_journal)" "(file-name-as-directory default_user_folder)"))
(setq minibuffer-history '("org-agenda-files" "default_user_folder"))
(setq read-char-history 'nil)
(setq face-name-history 'nil)
(setq bookmark-history 'nil)
(setq file-name-history '("~/PycharmProjects/second_brain/journal.org"))
